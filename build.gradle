plugins {
    id("fabric-loom")
    id("org.jetbrains.kotlin.jvm")
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://maven.fabricmc.net/" }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")

    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")

    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")
    modApi("me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig_version}") {
        exclude(module: "fabric-api")
    }
    modApi("me.shedaniel.cloth:config-2:${project.cloth_version}") {
        exclude(module: "fabric-api")
    }
    modCompileOnly("io.github.prospector:modmenu:${project.modmenu_version}") {
        transitive(true)
    }
    modRuntime("io.github.prospector:modmenu:${project.modmenu_version}") {
        transitive(false)
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// todo something not as hacky to get the path
task deleteOldLangFile(type: Delete) {
    delete("${sourceSets.main.resources.srcDirs[0]}/assets/compactstatuseffects/lang/en_us.json")
}

task copyLangFile(type: Copy, dependsOn: deleteOldLangFile) {
    from("${sourceSets.main.resources.srcDirs[0]}/assets/compactstatuseffects/lang/en_gb.json")
    into("${sourceSets.main.resources.srcDirs[0]}/assets/compactstatuseffects/lang")
    rename("en_gb", "en_us")

}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

assemble.dependsOn(copyLangFile)

compileKotlin.kotlinOptions.jvmTarget = "1.8"